import pandas as pd
import numpy as np
import tensorflow as tf
import random
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

# Set seeds for reproducibility
np.random.seed(42)
tf.random.set_seed(42)
random.seed(42)

# Passo 1: Leitura do CSV
file_path = './data/dengue_input_simple.csv'   # Substitua pelo caminho do seu arquivo
data = pd.read_csv(file_path, delimiter=';')

# Passo 2: Seleção e normalização das features
features = ['dengue_diagnosis', 'precipitacao (mm)', 'temperatura (°C)', 'umidade ar (%)', 
            't-1', 't-2', 't-3', 'precipitacao (mm)-1', 'temperatura (°C)-1', 'umidade ar (%)-1']
target = 'dengue_diagnosis'

# Filtrando as colunas de interesse
data = data[features]

# Normalizando os dados
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Passo 3: Preparação dos dados para o LSTM
look_back = 1
X, Y = [], []
for i in range(len(scaled_data) - look_back):
    X.append(scaled_data[i:i + look_back])
    Y.append(scaled_data[i + look_back, 0])  # coluna target é a primeira

X, Y = np.array(X), np.array(Y)

# Reshape dos dados para [amostras, time steps, features]
X = np.reshape(X, (X.shape[0], X.shape[1], X.shape[2]))

# Passo 4: Construção e treinamento do modelo LSTM
model = Sequential()
model.add(LSTM(50, input_shape=(look_back, len(features))))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

model.fit(X, Y, epochs=100, batch_size=1, verbose=2)

# Passo 5: Fazendo previsões
last_data = scaled_data[-look_back:]
last_data = np.reshape(last_data, (1, look_back, len(features)))

prediction = model.predict(last_data)
prediction = scaler.inverse_transform(np.concatenate([prediction, np.zeros((prediction.shape[0], scaled_data.shape[1] - 1))], axis=1))[:, 0]

print("Previsão do nível de infestação de dengue para o próximo mes:", prediction[0])